package ba.actis.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import ba.actis.models.Document;
import ba.actis.models.Speaker;
import ba.actis.models.User;
import ba.actis.repositories.DocumentRepository;
import ba.actis.repositories.SpeakerRepository;
import ba.actis.repositories.UserRepository;

@RestController
@RequestMapping("/documents")
public class DocumentController  extends BaseRestController<Document, DocumentRepository>{
	@Autowired
	private DocumentRepository documentRepository;
	
	@CrossOrigin
	@GetMapping(path="/get")
	public @ResponseBody Document getById(@RequestParam("id") Long id) {
		return documentRepository.findById(id);
	}
	
	@CrossOrigin
	@GetMapping(path="/allUserDocs")
	public @ResponseBody List<Document> allUserDocs(@RequestParam("id") Long id) {
		return documentRepository.findAllByUserId(id);
	}
	
	@CrossOrigin
	@GetMapping(path="/allUserRDocs")
	public @ResponseBody List<Document> allUserRDocs(@RequestParam("id") Long id) {
		return documentRepository.findUserReviewed(id);
	}

	
	@CrossOrigin
	@GetMapping(path="/DocsForReview")
	public @ResponseBody List<Document> DocsForReview() {
		return documentRepository.findDocsForReview();
	}
	
	@CrossOrigin
	@GetMapping(path="/getReviewerDocs")
	public @ResponseBody List<Document> getReviewerDocs(@RequestParam("id") Long id)  {
		return documentRepository.findReviewerDocs(id);
	}
	
	@Autowired
	private UserController uc;
	@CrossOrigin
	 @RequestMapping(value = "/update", method = RequestMethod.POST)
	  public @ResponseBody Integer updateReviewer(@RequestParam("reviewer") Long reviewerId, @RequestParam("id") Long id) {
		User reviewer = uc.getById(reviewerId);
		//return (long) 1;
			return documentRepository.setReviewer(reviewer, id);

	        }
	
	@CrossOrigin
	 @RequestMapping(value = "/updateDoc", method = RequestMethod.POST)
	  public @ResponseBody Integer updateDoc(@RequestParam("review") String review, @RequestParam("id") Long id) {
		
		 	
			return documentRepository.setReview(review, id);

	        }
	
	@CrossOrigin
	 @RequestMapping(value = "/updateDoc", method = RequestMethod.POST)
	  public @ResponseBody Integer declineDoc(@RequestParam("id") Long id) {
		
		 	
			return documentRepository.resetReviewer(id);

	        }
	
}
